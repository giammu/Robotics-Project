Oggi vediamo localizzazione e navigazione nella mappa creata.
-------------------------------
Continuiamo con la creazione della mappa

we have simluated robot, so we have to start 
	roscore 
	cd src/stage
	rosrun stage_ros stageros maze.world (simulated environement) nvc display a environement
	
start the mapping:
	roslaunch demo_mapping gmapping.launch
	rviz
	(edit fov in turtlebot.inc, samples have to be integer, 360*int)

    rosrun teleop_twist_keyboard teleop_twist_keyboard.py
	the robot move in the stage and rviz compose the map
	
	we can compare the map build on rviz with the map in which the robot move in stage
	do not crash in the wall because the odometry will work bad after: the odometry will keep integrating 

now we have a map inside the map topic, but we want to save and use it in future:
	cd src/stage
	mkdir maps
	cd maps
	rosrun map_server map_saver 			//this command save the map and all the metadata connected
if we go to the folder we have:
	-the map.pgm: l'immagine generata dal topic
	-the file.yaml with all the parameters of the map

la mappa di default del gmapping è troppo grande, dobbiamo ridurla, abbiamo modificato il file 
	demo_mapping/launch/gmapping.launch
	gmapping.launch //different from the last lesson, that not have param xmin, ymin, xmax and ymax and set by default param that are bigger
di default gli algoritmi di mapping aumentano gradualmente la mappa se supero il massimo

this that we saw it's the old way to create map, there are newer ways to build map (which use slam) but are more complicated

(slam lo vedremo dopo)
-------------------------------
Vediamo come performare la navigation in questo scenario

Launch file per la navigation:
	nav2d_conf/launch/turtlebot_amcl.launch
	(usiamo il simulated time: devo usarlo sicuramente nel progetto: singnifica che tutti i messaggi vengono generati con il timestamp che è dentro al file bag)
	(come local planner nel progetto è meglio usare tab)

	local planner tiene conto di tutto quello che è vicino
	<param name="/use_sim_time" value="true"> //use in our project because we not use real data but data form a bag file
	
apri amcl.launch.xml
	è un launch file che serve per la amcl configuration e contiene i parameters
	amcl.launch.xml contain all the default parameters of the launch file 
	odom_model_type is dif //extremely important to work properly
	trasnform_tolerance //help the transform to data to map if the device is busy, delta allowed to wait before discarding changes

Poi vediamo le configurazioni di tutti i singoli blocchi:
	apri cfg/costmap_common_param.yaml
E abbiamo i parameters per local e global costmap:
	apri: global_costmap_params.yaml
	apri: local_costmap_params.yaml

Il planner dove dico al robot come deve muoversi:
	apri file:dwa_local_planner_params.yaml
di solito il global planner passa vicino agli obstacles, ma poi interviene il local planner che gli fa fare un giro in modo che sia lontano dall'ostacolo

apri file: move_base_params.yaml
	questo dice il nome dei planners e le running frequency

----------------------
Proviamolo:
	rosrun nav2d_conf turtlebot_amcl.launch
	nel terminale vedo il debug di quello che sta succedendo

Mostra nella VNC una mappa, so che il robot si trova nel cerchio dentro nuvola verde
la mappa è stata caricata da file
la nuvola verde è grande perchè amcl è appena stato inizializzato e ha pochi dati per settare la posizone del robot

Ora voglio mandargli i comandi per muoverlo: premo il tasto "2D NAV Goal" sulla gui e traccio una freccia: poi il robot si muove lì

Il red path: è il global path. Il blue path: è il local path: è più corto e tiene conto degli ostacoli e della cinematica del robot

Mappa: quella black è la real map, quella rossa è lo scan fatto dal robot
amcl deve correggere i dati della odometry: c'è un piccolo errore di overlapping che si vede sulla mappa

Possiamo vedere i bordi degli ostacoli con il tasto Map della gui

if we tick map (nella gui di rviz) it shows the border setted in config file on the wall of the map: is more big than the real wall because the config set that the robot cannot be too near the wall to avoid problem on odometry
there are a small debug that show when new goal are added, (if meet something strange?) and when reach goal

Possiamo vedere la pointcloud con il tasto PointCloud2: vediamo i costi del planners: rosso = higher cost = dove voglio che il robot si muova

Quindi questo era come setuppare la autonomous navigation con la known map.

Possiamo vedere i topics che sono sulla network:
	rostopic list
	rostopic echo /move_base/goal -> se metto un goal sulla gui, vedo che viene pubblicato 1 volta il goal
		is actionlib so we have multple topic in which we can analyze what the robot is doing while we set goal
	rostopic echo /move_base/feedback -> vedo quali sono le posizioni del robot nel nostro environment, ho una idea di dove si trova il robot
									->in feedback topic we have also an id of the goal, e possiamo cancellare un goal
	rostopic pub /move_base/cancel actionlib msgs/GoalID poi faccio tab e si autocompleta -> mi permette di cancellare il goal
	rostopic pub /movebase/goal e poi faccio tab -> mi permette di pubblicare il goal da command line, devo editare il frame id per specificare il goal (frame_id: 'map')

for monitor the robot we not use cmd line to cancel, create and monitor: we have actionlib so we create an actionlib client to monitor the robot

-----------------------------
Ora vediamo come fare navigation senza avere una mappa già computata:

Se non ho la mappa, voglio usare uno slam algorithm
Uso il gmapping invece di amcl
	apri file: turtlebot_gmapping.launch
		il file è simile, le differenze sono che:
		-non carico una mappa
		-non runno amcl perchè non posso fare localization perchè non ho una map
		-includo il gmapping launchfile
	
	apri file: gmapping.launch.xml
		la configurazione è la stessa
		potrei voler cambiare tutti i parameters di gmapping che mi permettono di fare fine-tuning

Ora vediamo come funziona gmapping:
	roslaunch nav2d_conf turtlebot_gmapping.launch
	gmapping costruisce la mappa in real time quando faccio partire il robot
	in rviz: posso dare un goal al robot fuori dalla mappa
	è lento e pesante perchè crea la mappa in real-time e computa la trajectory
	l'obiettivo non è costruire una mappa perfetta, ma una mappa in cui il robot sia in grado di muoversi

-----------------------------

SLAM toolbox : è un package per graph based localization 
	slam è un tool che funziona molto bene solo se ho fatto un buon tuning 

faccio partire il nostro environment	
	cd src/stage
	rosrun stage_ros stageros maze.world 
facciamo partire lo slam toolbox
	roslaunch demo_mapping slam_toolbox_default.launch    (è lo slam toolbox che usa i default parameters)
e poi: rviz (seleziono topdownortho, poi add>by topic > map)
facciamo partire i comandi 
	rosrun teleop_twist_keyboard teleop_twist_keyboard.py

quindi ora abbiamo la simulation e il mapping algorithm

però vediamo che non funziona bene

	apri: demo_mapping/mapper_params_online_async_default.yaml per vedere i parameters di slam_toolbox_default.launch

allora dobbiamo fare fine-tuning dei parameters

	apri: mapper_params_online_async.yaml

Domani finiamo questo e vediamo come usarlo per fare anche la localization




