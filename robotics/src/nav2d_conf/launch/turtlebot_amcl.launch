
<launch>
  <arg name="base"       default="burger"/>  <!-- questo è uno dei simulated robot dentro standard turtlebot-->
  
  <!-- create_circles_asus_xtion_pro create_circles_kinect kobuki_hexagons_astra kobuki_hexagons_asus_xtion_pro kobuki_hexagons_asus_xtion_pro 
kobuki_hexagons_kinect kobuki_hexagons_r200 roomba_circles_asus_xtion_pro roomba_circles_kinect -->

  <!-- Name of the map to use and initial position -->
  <arg name="map_file"       default="$(find nav2d_conf)/maps/maze.yaml"/>  <!--definisco il map file.yaml-->
  <arg name="world_file"     default="$(find nav2d_conf)/maps/stage/maze.world"/> <!--definisco il world file per lo stage quando parte-->
  <arg name="initial_pose_x" default="2.0"/> <!--definisco la initial pose del robot-->
  <arg name="initial_pose_y" default="2.0"/> 
  <arg name="initial_pose_a" default="0.0"/>

  <arg name="odom_frame_id"   default="odom"/> <!--definisco alcuni frame-->
  <arg name="global_frame_id" default="map"/>

  <param name="/use_sim_time" value="true"/> <!--usiamo il simulated time: devo usarlo sicuramente nel progetto: singnifica che tutti i messaggi vengono generati con il timestamp che è dentro al file bag. (invece non cambia nulla se runno in real time)-->


 <!--  ***************** Robot simulation *****************  -->
  <node pkg="stage_ros" type="stageros" name="stageros" args="$(arg world_file)"> <!--passo il world file che definisce il world-->
    <param name="base_watchdog_timeout" value="0.5"/>
    <remap from="base_scan" to="scan"/> <!--facciamo remapping-->
  </node>


  <!--  ***************** Robot Model *****************  -->
  <include file="$(find turtlebot3_bringup)/launch/includes/description.launch.xml"> <!--questo non è mandatorio,serve solo per avere un robot model dentro ad rviz-->
    <arg name="model" value="$(arg base)" />
  </include>
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
    <param name="use_gui" value="false"/>
  </node>


  <!--  ************** Navigation  ***************  -->
   <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen"> <!--il package è move base-->
    <rosparam file="$(find nav2d_conf)/cfg/costmap_common_params.yaml" command="load" ns="global_costmap" /> <!--good practice: non mettere tutti i parameters nel launch file, ma avere un configuration file per ogni element-->
    <rosparam file="$(find nav2d_conf)/cfg/costmap_common_params.yaml" command="load" ns="local_costmap" />   <!--alcuni parametri sono condivisi tra i namespace local e global costmap-->
    <rosparam file="$(find nav2d_conf)/cfg/local_costmap_params.yaml" command="load" />   
    <rosparam file="$(find nav2d_conf)/cfg/global_costmap_params.yaml" command="load" />
    <rosparam file="$(find nav2d_conf)/cfg/dwa_local_planner_params.yaml" command="load" /> <!--faccio partire il local planner: dwa oppure tab è meglio per il progetto-->
    <rosparam file="$(find nav2d_conf)/cfg/move_base_params.yaml" command="load" /> <!--carichiamo i parameters per il global planner--> 

    <param name="base_global_planner" value="navfn/NavfnROS" />  <!--   planner  navfn/NavfnROS alternative  carrot_planner/CarrotPlanner --> <!--NavfnROS è il nuovo planner, CarrotPlanner è il vecchio-->
    <param name="planner_frequency" value="1.0" /> <!--metto questi 2 parameters nel launch file perchè magari voglio cambiarli rapidamente-->
    <param name="planner_patience" value="5.0" /> <!-- How long the planner will wait in seconds in an attempt to find a valid plan before space-clearing operations are performed.  -->

    <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS" /> <!--qui facciamo override del local planner per usarne un'altro-->
    <param name="controller_frequency" value="5.0" /> <!--la frequenza è più alta perchè nel local planner potrei incontrare oggetti più vicini-->
    <param name="controller_patience" value="5.0" /> <!-- How long the controller will wait in seconds without receiving a valid control before space-clearing operations are performed.  -->

    <param name="clearing_rotation_allowed" value="true"/> <!--Significa che possiamo ruotare in-place, per altri tipi di robot potrebbe essere false-->
  </node>


  <!--  ****** Maps *****  -->
  <node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)"> <!--map_server prende come input la mappa e la pubblica sulla ros network-->
    <param name="frame_id" value="map"/>
  </node>


  <!--  ****** amcl *****  -->    <!--il nodo amcl ci serve per localizzare il robot sulla mappa-->
  <include file="$(find nav2d_conf)/launch/amcl.launch.xml"> <!--configuration file con tutti i parameters-->
    <arg name="scan_topic" value="scan"/> <!--scan l'abbiamo remappato prima-->
    <arg name="use_map_topic" value="true"/> <!--vero perchè abbiamo una mappa che viene pubblicata-->
    <arg name="initial_pose_x" value="$(arg initial_pose_x)"/> <!--la starting pose serve perchè serve a amcl-->
    <arg name="initial_pose_y" value="$(arg initial_pose_y)"/>
    <arg name="initial_pose_a" value="$(arg initial_pose_a)"/>
  </include>


  <!--  **************** Visualisation ****************  -->
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find nav2d_conf)/rviz/robot_navigation.rviz"/> <!--faccio partire rviz con il file di pre-configurazione-->
</launch>
